import pygame
import sys

# --- Constants ---
SCREEN_WIDTH = 1360
SCREEN_HEIGHT = 940
BLOCK_SIZE = 22
PLAYER_SIZE = 22
SCALE_SIZE = 2  # Fixed scale factor
BACKGROUND_COLOR = (50, 50, 50)

# --- Initialize pygame ---
pygame.init()
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Isometric World without Zoom")
clock = pygame.time.Clock()

# --- AnimatedSprite Class ---
class AnimatedSprite:
    def __init__(self, image_path, frame_width, frame_height, scale_size, num_frames, frame_delay):
        try:
            self.sheet = pygame.image.load(image_path).convert_alpha()
        except pygame.error as e:
            print(f"Error loading animated sprite '{image_path}': {e}")
            sys.exit()

        self.frame_width = frame_width
        self.frame_height = frame_height
        self.scale_size = scale_size
        self.num_frames = num_frames
        self.frame_delay = frame_delay

        self.frames = []
        self.current_frame = 0
        self.elapsed_time = 0

        # Extract frames from the sprite sheet
        for i in range(self.num_frames):
            rect = pygame.Rect(i * self.frame_width, 0, self.frame_width, self.frame_height)
            frame = self.sheet.subsurface(rect)
            scaled_frame = pygame.transform.scale(
                frame,
                (int(self.frame_width * self.scale_size), int(self.frame_height * self.scale_size))
            )
            self.frames.append(scaled_frame)

    def update(self, dt):
        self.elapsed_time += dt
        if self.elapsed_time >= self.frame_delay:
            self.elapsed_time = 0
            self.current_frame = (self.current_frame + 1) % self.num_frames

    def draw(self, surface, x, y):
        surface.blit(self.frames[self.current_frame], (x, y))


# --- Camera Class ---
class Camera:
    def __init__(self):
        self.offset_x = 0
        self.offset_y = 0

    def update(self, player_iso_x, player_iso_y):
        self.offset_x = player_iso_x - SCREEN_WIDTH // 2
        self.offset_y = player_iso_y - SCREEN_HEIGHT // 2


# --- World Class ---
class World:
    def __init__(self, map_file):
        self.layers = 3
        self.map_data = self.load_map_from_file(map_file)
        self.player_start_pos = self.find_player_start_position()

    def load_map_from_file(self, file_path):
        try:
            with open(file_path, "r") as f:
                lines = f.readlines()

            chunks = []
            current_layer = -1

            for line in lines:
                line = line.strip()
                if line.startswith("# Layer"):
                    current_layer += 1
                    chunks.append([])
                    continue
                if line and current_layer >= 0:
                    chunks[current_layer].append([int(char) for char in line])
            return chunks

        except FileNotFoundError:
            print(f"Map file '{file_path}' not found!")
            sys.exit()
        except Exception as e:
            print(f"Error loading map: {e}")
            sys.exit()

    def find_player_start_position(self):
        layer_index = 1
        for y, row in enumerate(self.map_data[layer_index]):
            for x, block in enumerate(row):
                if block == 5:
                    return (x, y, layer_index)
        print("Block '5' not found on layer 1. Setting default player position.")
        return (0, 0, layer_index)

    def render(self, surface, textures, camera):
        for layer_index, layer in enumerate(self.map_data):
            for y, row in enumerate(layer):
                for x, block in enumerate(row):
                    if block > 0:
                        iso_x = (x - y) * BLOCK_SIZE * SCALE_SIZE // 2
                        iso_y = (x + y) * BLOCK_SIZE * SCALE_SIZE // 4 - layer_index * BLOCK_SIZE * SCALE_SIZE // 2
                        draw_x = iso_x + SCREEN_WIDTH // 2 - camera.offset_x
                        draw_y = iso_y + SCREEN_HEIGHT // 3.5 - camera.offset_y
                        texture = textures.get(str(block), None)
                        if texture:
                            surface.blit(texture, (draw_x, draw_y))


# --- Player Class ---
class Player:
    def __init__(self, x, y, layer=1, speed=5, texture_path="img/player.png"):
        self.grid_x = x
        self.grid_y = y
        self.layer = layer
        self.speed = speed

        try:
            self.texture = pygame.image.load(texture_path).convert_alpha()
            self.texture = pygame.transform.scale(self.texture, (PLAYER_SIZE, PLAYER_SIZE))
        except pygame.error as e:
            print(f"Error loading player texture '{texture_path}': {e}")
            sys.exit()

    def move(self, dx, dy, dt, world):
        new_x = self.grid_x + dx * self.speed * dt
        new_y = self.grid_y + dy * self.speed * dt
        int_new_x = int(new_x)
        int_new_y = int(new_y)
        if (
            0 <= int_new_x < len(world.map_data[self.layer][0]) and
            0 <= int_new_y < len(world.map_data[self.layer]) and
            world.map_data[self.layer][int_new_y][int_new_x] > 0
        ):
            self.grid_x, self.grid_y = new_x, new_y

    def draw(self, surface, camera):
        iso_x = (self.grid_x - self.grid_y) * BLOCK_SIZE * SCALE_SIZE // 2
        iso_y = (self.grid_x + self.grid_y) * BLOCK_SIZE * SCALE_SIZE // 4 - self.layer * BLOCK_SIZE * SCALE_SIZE // 2
        draw_x = iso_x + SCREEN_WIDTH // 2 - camera.offset_x - PLAYER_SIZE // 2
        draw_y = iso_y + SCREEN_HEIGHT // 3.5 - camera.offset_y - PLAYER_SIZE // 2
        surface.blit(self.texture, (draw_x, draw_y))


# --- Main Game Setup ---
def main():
    TEXTURES = {
        "1": pygame.image.load("assets/img/blocks/stone.png").convert_alpha(),
        "2": pygame.image.load("assets/img/blocks/grass.png").convert_alpha(),
        "3": pygame.image.load("assets/img/blocks/tree.png").convert_alpha(),
        "4": pygame.image.load("assets/img/blocks/grass1.png").convert_alpha(),
        "5": pygame.image.load("assets/img/blocks/block_5.png").convert_alpha(),
    }

    world = World("assets/maps/map.txt")
    player_start_x, player_start_y, player_layer = world.player_start_pos
    player = Player(player_start_x, player_start_y, layer=player_layer, speed=100)

    camera = Camera()

    running = True
    while running:
        dt = clock.tick(60) / 1000

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        keys = pygame.key.get_pressed()
        dx, dy = 0, 0
        if keys[pygame.K_a]:
            dx = -1
        if keys[pygame.K_d]:
            dx = 1
        if keys[pygame.K_w]:
            dy = -1
        if keys[pygame.K_s]:
            dy = 1

        player.move(dx, dy, dt, world)

        player_iso_x = (player.grid_x - player.grid_y) * BLOCK_SIZE * SCALE_SIZE // 2
        player_iso_y = (player.grid_x + player.grid_y) * BLOCK_SIZE * SCALE_SIZE // 4 - player.layer * BLOCK_SIZE * SCALE_SIZE // 2
        camera.update(player_iso_x, player_iso_y)

        screen.fill(BACKGROUND_COLOR)
        world.render(screen, TEXTURES, camera)
        player.draw(screen, camera)

        pygame.display.flip()

    pygame.quit()
    sys.exit()


if __name__ == "__main__":
    main()
